#!/usr/bin/python
# -*- coding: utf-8 -*-

import pdb

import argparse as mod_argparse
import time as mod_time

import gitutils as mod_gitutils

mod_gitutils.assert_in_git_repository()

parser = mod_argparse.ArgumentParser(
         description='Detectes (and possibly deletes) old unused branches')

parser.add_argument('-r', '--remote', action='store_true',
                    default=False, help='Get remote branches')
parser.add_argument('-a', '--all', action='store_true',
                    default=False, help='Get all (local and remote) branches')
parser.add_argument('-d', '--days', default=180, type=int,
                    help='How many days old must a branch be')
parser.add_argument('--delete', action='store_true', default=False,
                    help='Remove branches older than ... days (you\ll be asked to confirm the deletion)')

args = parser.parse_args()

now = mod_time.time()

branches = mod_gitutils.get_branches(args.remote, args.all)
for branch in branches:
    success, result = mod_gitutils.execute_git('log ' + branch + ' -1 --format=%at', output=False)
    assert success

    time_diff_seconds = int(now) - int(result)
    time_diff_days = int((float(time_diff_seconds) / (60*60*24)) * 100) / 100.

    #print 'Last commit in %s was %s days ago' % (branch, time_diff_days)

    if time_diff_days > args.days:
        print 'Branch %s is older than %s days (%s)!' % (branch, args.days, time_diff_days)
        if args.delete:
            answer = raw_input('Remove [yes/N] ?')
            if answer.lower() == 'yes':
                delete_branch(branch, force=True)
            else:
                print 'Not deleted'
